def draw_board(board):
    # Draw the top row
    print("┏" + "━" * len(board[0]) + "┓")
    
    # Draw the middle rows
    for row in board:
        print("┃" + "".join(row) + "┃")
    
    # Draw the bottom row
    print("┗" + "━" * len(board[0]) + "┛")


def get_move(board, player):
    while True:
        try:
            move = int(input(f"{player}, enter your move (1-{len(board) ** 2}): "))
            row = (move - 1) // len(board)
            col = (move - 1) % len(board)
            if board[row][col] == " ":
                board[row][col] = player
                break
            else:
                print("That space is already occupied. Please try again.")
        except (ValueError, IndexError):
            print("Invalid move. Please try again.")


def has_won(board, player):
    # Check rows
    for row in board:
        if all(cell == player for cell in row):
            return True
    
    # Check columns
    for col in range(len(board)):
        if all(board[row][col] == player for row in range(len(board))):
            return True
    
    # Check diagonals
    if all(board[i][i] == player for i in range(len(board))):
        return True
    if all(board[i][len(board) - i - 1] == player for i in range(len(board))):
        return True
    
    return False


def play_game(size=3):
    board = [[" " for _ in range(size)] for _ in range(size)]
    players = ["X", "O"]
    player_index = 0
    
    while True:
        draw_board(board)
        get_move(board, players[player_index])
        if has_won(board, players[player_index]):
            print(f"{players[player_index]} has won the game!")
            break
        
        player_index = (player_index + 1) % len(players)
        
        # Check for a draw
        if all(cell != " " for row in board for cell in row):
            print("The game is a draw.")
            break

play_game()